const cardBody = document.querySelector('#cardBody');
var sockJS;
var stomp;


var textTmp = '';
var strTargetArr = ['다.', '요.', '요!', '요?', '까?', '가?'];
//var strTargetArr = ['.', '!', '?'];
var payload = '';
var receiveData = '';
var strTargetCnt = 0;
var html = '';
var userTmp = atob($('#userTarget1').val());
var pwdTmp = atob($('#userTarget2').val());
var randomTargetName = 'ytn_stomp_connection_'+new Date().valueOf();
var targetCloseTime = new Date();

if(createRabbitmqQueue()){
    console.log('createRabbitmqQueue Success !!');
    socketCreate();
}

/*
setInterval(function(){
    deleteQueueList();
}, 300000);
*/

/**
 * socketCreate.
 * @author : mattmk
*/ 
function socketCreate(){
    sockJS = new WebSocket("ws://10.10.5.213"+":15674/ws");
    stomp = Stomp.over(sockJS);
    stomp.debug = null;

    if(stomp.connected){
        stomp.disconnect();
    }

    stomp.heartbeat.outgoing = 0; //Rabbit에선 heartbeat 안먹힌다고 함
    stomp.heartbeat.incoming = 0; //Rabbit에선 heartbeat 안먹힌다고 함

    stomp.connect(userTmp, pwdTmp, function (frame) {
        //stomp.connect("guest", "guest", function (frame) {
            console.log('STOMP Connected');
            targetCloseTime = new Date();

            // subscribe ������ ���� rabbit�� Exchange, Queue�� ����� ���� �ٲ�
            // �ǵڿ� queue �̸� ���̱�.
            //stomp.subscribe(`/exchange/chat.exchange/mattmk.routing.key`, function (content) {
            // ytn.dtvcc.data
            // dtvcc_global2
            // DTVCC
            //stomp.subscribe(`10.10.5.213:15672/exchange/DTVCC/ytn.dtvcc.data`, function (content) {
            //stomp.subscribe(`/exchange/DTVCC/ytn.dtvcc.data`, function (content) {

            //stomp.subscribe(`/direct`, function (content) {

            //stomp.subscribe(`/queue/mktest`, function (content) {
             
            stomp.subscribe(`/amq/queue/`+randomTargetName, function (content) {
            
            /*
                console.log('content ---> ', content);
                
                console.log('content.body ---> ', content.body);
                
                const payload = JSON.parse(content.body);
                
                console.log('payload ---> ', payload);
                
                //const html = `<div class="card mb-4 py-3 border-bottom-primary">${payload.message}</div>`;
                var today = new Date();
        
                var year = today.getFullYear();
                var month = ('0' + (today.getMonth() + 1)).slice(-2);
                var day = ('0' + today.getDate()).slice(-2);
                var hours = ('0' + today.getHours()).slice(-2); 
                var minutes = ('0' + today.getMinutes()).slice(-2);
                var seconds = ('0' + today.getSeconds()).slice(-2); 
                
                
                var showTodayTime = year + '-' + month  + '-' + day + ' ' + hours + ':' + minutes  + ':' + seconds;
                */
        
                /*
                
                */
                
                /*
                다 만들어지면 출력.
                payload = '';
                receiveData = '';
        
                payload = JSON.parse(content.body);
                receiveData = payload.data.replace(/\\r\\n|\\n|\\r/gm,'');
        
                textTmp+=receiveData;
        
                if(resultCrLfGetType(textTmp)){
                    console.log('receiveData ---> ', receiveData);
                    textTmp+='\n';
                    var html = `<p style="font-size:24px;font-family:'Malgun Gothic';color: black;">${textTmp}</p>`;
                    //cardBody.insertAdjacentHTML('beforeend', html);
                    textTmp = '';
                }
                */
                payload = '';
                payload = JSON.parse(content.body);
        
                receiveData = '';
                receiveData = payload.data.replace(/\\r\\n|\\n|\\r/gm,'');
        
                if(strTargetCnt == 0){
                    window.scrollTo({top:0, left:0});
                    //html = `<p id="targetCnt${strTargetCnt}"style="font-size:24px;font-family:'Malgun Gothic';color: black;">${receiveData}</p>`;
                    //cardBody.insertAdjacentHTML('beforeend', html);
                    strTargetCnt++;
                }else if(strTargetCnt == 1 || resultCrLfGetType(receiveData)){
                   /* 
                    $(`#targetCnt${strTargetCnt}`).text($(`#targetCnt${strTargetCnt}`).text()+receiveData);
                    cardBody.insertAdjacentHTML('beforeend', html);
                    strTargetCnt++;
                    html = `<p id="targetCnt${strTargetCnt}"style="font-size:24px;font-family:'Malgun Gothic';color: black;"></p>`;
                    cardBody.insertAdjacentHTML('beforeend', html);
                    */
                    strTargetCnt++;
                    /*
                        특정 글자수가 넘어가면 화면 초기화 작업 진행.
                    */
                    if($('#targetContent').text().length >= 15000){
                        console.log('text().length ====> ', $('#targetContent').text().length);
                        mainContextSplit(7500);
                    }
                    $('#targetContent').append(receiveData+"</br>");
                }else{
                   // $(`#targetCnt${strTargetCnt}`).text($(`#targetCnt${strTargetCnt}`).text()+receiveData);
                   $('#targetContent').append(receiveData);
                }
        
                //밑의 인자는 Queue 생성 시 주는 옵션
                //auto-delete : Consumer가 없으면 스스로 삭제되는 Queue
                //durable : 서버와 연결이 끊겨도 메세지를 저장하고 있음
                //exclusive : 동일한 이름의 Queue 생길 수 있음
            //},{'auto-delete':true, 'durable':true, 'exclusive':false});
        },{});
        //});
        
        }, onError, '/');

        sockJS.onclose = function(event){
            console.log('onclose');

            var diffTimeSec = (new Date().getTime()-targetCloseTime.getTime())/ (1000);
            diffTimeSec = parseInt(diffTimeSec);

            if(diffTimeSec <= 20){
                alert('실시간 자막시스템 페이지를 새로고침 합니다.');
                location.reload();
            }else{
                socketCreate();
            }
        }

        //stomp.debug = onDebug;

        //stomp.connect("[[${session.stompId}]]", "[[${session.stompPwd}]]", function (frame) {
}

function onError(e) {
    console.log("STOMP ERROR", e);
}

/*
function onDebug(m) {
    console.log("STOMP DEBUG", m);
}
*/

/**
 * Filter Data Boolean Return.
 * @author : mattmk
*/ 
function resultCrLfGetType(receiveStr){
    var result = false;
    var strTmp = '';
    strTmp = receiveStr.replace(/ /g,'');

    for(var i=0;i<strTargetArr.length;i++){
        if(strTmp.indexOf(strTargetArr[i]) >= 0
            || (strTmp.charAt(strTmp.length-1) == '.' && isNaN(strTmp.length-2))
            || strTmp.charAt(strTmp.length-1) == '!'
            || strTmp.charAt(strTmp.length-1) == '?'){
       //if(strTmp.charAt(strTmp.length-1) == strTargetArr[i]){
            result = true;
            return result;
        }
    }

    return result;
}

/**
 * 메인 화면 초기화.
 * @author : mattmk
*/ 
function mainContextSplit(targetLength){
    var mainContext = $('#targetContent').text();

    $('#targetContent').text(mainContext.substring(targetLength,mainContext.length));
    $('#targetContent').html(($('#targetContent').text().replaceAll('.','.<br/>').replaceAll('?','?<br/>').replaceAll('!','!<br/>')))
}


function createRabbitmqQueue(){
    var result = false;

    $.ajax({
        type: "POST",
        url: "/ytn/captions/data/createRabbitmqQueue", 
        data: {
                'randomTargetName':randomTargetName
        },
        async:false,
        dataType : "json",
        success : function(data){
            result = data;
        },
        error:function(request,status,error){
            console.log("code:"+request.status+"\n"+"message:"+request.responseText+"\n"+"error:"+error);
        }
    });
    return result;
}



function deleteTargetQueue(){
    $.ajax({
        type: "POST",
        url: "/ytn/captions/data/deleteTargetQueue", 
        data: {
            'queueName' : randomTargetName
        },
        //async:false,
        //keepalive : true,
        dataType : "json",
        success : function(data){
            result = data;
        },
        error:function(request,status,error){
            console.log("code:"+request.status+"\n"+"message:"+request.responseText+"\n"+"error:"+error);
        }
    });
}